package org.example.bookvexebej2e.services.chat;

import org.example.bookvexebej2e.models.db.RouteDbModel;
import org.example.bookvexebej2e.models.db.TripDbModel;
import org.example.bookvexebej2e.repositories.route.RouteRepository;
import org.example.bookvexebej2e.repositories.trip.TripRepository;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Locale;
import java.util.stream.Collectors;

/**
 * Service cung c·∫•p context t·ª´ database cho AI Chatbot
 * Gi√∫p chatbot c√≥ th√¥ng tin th·ª±c t·∫ø v·ªÅ tuy·∫øn ƒë∆∞·ªùng, chuy·∫øn xe, gi√° v√©
 */
@Service
public class DatabaseContextService {

    private final RouteRepository routeRepository;
    private final TripRepository tripRepository;
    private final DateTimeFormatter vietnameseFormatter = DateTimeFormatter.ofPattern("HH:mm, dd/MM/yyyy", Locale.forLanguageTag("vi-VN"));

    public DatabaseContextService(RouteRepository routeRepository, TripRepository tripRepository) {
        this.routeRepository = routeRepository;
        this.tripRepository = tripRepository;
    }

    /**
     * L·∫•y th√¥ng tin t·ªïng quan v·ªÅ h·ªá th·ªëng
     */
    public String getSystemOverview() {
        long totalRoutes = routeRepository.count();
        long totalTrips = tripRepository.count();

        return String.format("""
                üìä TH√îNG TIN H·ªÜ TH·ªêNG ƒê·∫∂T V√â XE:
                - T·ªïng s·ªë tuy·∫øn ƒë∆∞·ªùng: %d tuy·∫øn
                - T·ªïng s·ªë chuy·∫øn xe: %d chuy·∫øn
                - H·ªá th·ªëng h·ªó tr·ª£ ƒë·∫∑t v√© tr·ª±c tuy·∫øn 24/7
                - Thanh to√°n qua nhi·ªÅu ph∆∞∆°ng th·ª©c (Ti·ªÅn m·∫∑t, Chuy·ªÉn kho·∫£n, V√≠ ƒëi·ªán t·ª≠)
                - Th·ªùi gian hi·ªán t·∫°i ·ªü Vi·ªát Nam: %s
                """, totalRoutes, totalTrips, LocalDateTime.now().format(vietnameseFormatter));
    }

    /**
     * L·∫•y th√¥ng tin v·ªÅ t·∫•t c·∫£ c√°c tuy·∫øn ƒë∆∞·ªùng
     */
    public String getRoutesContext() {
        List<RouteDbModel> routes = routeRepository.findAll(PageRequest.of(0, 20, Sort.by("startLocation"))).getContent();

        if (routes.isEmpty()) {
            return "‚ö†Ô∏è Hi·ªán t·∫°i ch∆∞a c√≥ th√¥ng tin tuy·∫øn ƒë∆∞·ªùng n√†o trong h·ªá th·ªëng.";
        }

        StringBuilder context = new StringBuilder("üöç C√ÅC TUY·∫æN ƒê∆Ø·ªúNG HI·ªÜN C√ì:\n\n");

        for (RouteDbModel route : routes) {
            context.append(String.format(
                    "‚Ä¢ %s ‚Üí %s\n" +
                    "  - Kho·∫£ng c√°ch: %.1f km\n" +
                    "  - Th·ªùi gian ∆∞·ªõc t√≠nh: %s\n\n",
                    route.getStartLocation(),
                    route.getEndLocation(),
                    route.getDistanceKm(),
                    formatDuration(route.getEstimatedDuration())
            ));
        }

        return context.toString();
    }

    /**
     * L·∫•y th√¥ng tin c√°c chuy·∫øn xe s·∫Øp kh·ªüi h√†nh
     */
    public String getUpcomingTripsContext() {
        LocalDateTime now = LocalDateTime.now();
        LocalDateTime nextWeek = now.plusWeeks(1);

        // T·∫°o specification ƒë·ªÉ l·ªçc c√°c chuy·∫øn xe trong t∆∞∆°ng lai
        Specification<TripDbModel> spec = (root, query, cb) -> {
            return cb.and(
                    cb.greaterThanOrEqualTo(root.get("departureTime"), now),
                    cb.lessThanOrEqualTo(root.get("departureTime"), nextWeek),
                    cb.equal(root.get("isDeleted"), false)
            );
        };

        List<TripDbModel> upcomingTrips = tripRepository.findAll(spec,
                PageRequest.of(0, 15, Sort.by("departureTime"))).getContent();

        if (upcomingTrips.isEmpty()) {
            return "‚ö†Ô∏è Hi·ªán t·∫°i ch∆∞a c√≥ chuy·∫øn xe n√†o trong 7 ng√†y t·ªõi.";
        }

        StringBuilder context = new StringBuilder("üïê C√ÅC CHUY·∫æN XE S·∫ÆP KH·ªûI H√ÄNH (7 NG√ÄY T·ªöI):\n\n");

        for (TripDbModel trip : upcomingTrips) {
            if (trip.getRoute() != null) {
                context.append(String.format(
                        "‚Ä¢ %s ‚Üí %s\n" +
                        "  - Kh·ªüi h√†nh: %s\n" +
                        "  - Gi√° v√©: %s VNƒê\n" +
                        "  - Gh·∫ø tr·ªëng: %d gh·∫ø\n\n",
                        trip.getRoute().getStartLocation(),
                        trip.getRoute().getEndLocation(),
                        trip.getDepartureTime().format(vietnameseFormatter),
                        formatPrice(trip.getPrice()),
                        trip.getAvailableSeats()
                ));
            }
        }

        return context.toString();
    }

    /**
     * T√¨m ki·∫øm tuy·∫øn ƒë∆∞·ªùng theo ƒëi·ªÉm ƒëi v√† ƒëi·ªÉm ƒë·∫øn
     */
    public String findRoutesByLocations(String departure, String arrival) {
        // Chu·∫©n h√≥a t√™n ƒë·ªãa ƒëi·ªÉm (vi·∫øt hoa ch·ªØ c√°i ƒë·∫ßu)
        String departureNormalized = normalizeLocation(departure);
        String arrivalNormalized = normalizeLocation(arrival);

        // T√¨m ki·∫øm tuy·∫øn ƒë∆∞·ªùng v·ªõi LIKE ƒë·ªÉ linh ho·∫°t h∆°n
        Specification<RouteDbModel> spec = (root, query, cb) -> {
            return cb.and(
                    cb.like(cb.lower(root.get("startLocation")), "%" + departureNormalized.toLowerCase() + "%"),
                    cb.like(cb.lower(root.get("endLocation")), "%" + arrivalNormalized.toLowerCase() + "%"),
                    cb.equal(root.get("isDeleted"), false)
            );
        };

        List<RouteDbModel> routes = routeRepository.findAll(spec);

        if (routes.isEmpty()) {
            return String.format(
                    "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y tuy·∫øn ƒë∆∞·ªùng t·ª´ %s ƒë·∫øn %s.\n" +
                    "B·∫°n c√≥ th·ªÉ th·ª≠ t√¨m ki·∫øm v·ªõi t√™n ƒë·ªãa ƒëi·ªÉm kh√°c ho·∫∑c li√™n h·ªá hotline ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£.",
                    departureNormalized, arrivalNormalized
            );
        }

        StringBuilder context = new StringBuilder(String.format(
                "üîç TUY·∫æN ƒê∆Ø·ªúNG T·ª™ %s ƒê√äN %s:\n\n",
                departureNormalized.toUpperCase(),
                arrivalNormalized.toUpperCase()
        ));

        for (RouteDbModel route : routes) {
            context.append(String.format(
                    "‚Ä¢ %s ‚Üí %s\n" +
                    "  - Kho·∫£ng c√°ch: %.1f km\n" +
                    "  - Th·ªùi gian: %s\n",
                    route.getStartLocation(),
                    route.getEndLocation(),
                    route.getDistanceKm(),
                    formatDuration(route.getEstimatedDuration())
            ));

            // T√¨m c√°c chuy·∫øn xe cho tuy·∫øn n√†y
            String tripsInfo = findTripsByRoute(route);
            context.append(tripsInfo).append("\n");
        }

        return context.toString();
    }

    /**
     * T√¨m c√°c chuy·∫øn xe theo tuy·∫øn ƒë∆∞·ªùng
     */
    private String findTripsByRoute(RouteDbModel route) {
        LocalDateTime now = LocalDateTime.now();

        Specification<TripDbModel> spec = (root, query, cb) -> {
            return cb.and(
                    cb.equal(root.get("route"), route),
                    cb.greaterThanOrEqualTo(root.get("departureTime"), now),
                    cb.equal(root.get("isDeleted"), false)
            );
        };

        List<TripDbModel> trips = tripRepository.findAll(spec,
                PageRequest.of(0, 5, Sort.by("departureTime"))).getContent();

        if (trips.isEmpty()) {
            return "  ‚ö†Ô∏è Hi·ªán ch∆∞a c√≥ chuy·∫øn xe n√†o trong th·ªùi gian t·ªõi.\n";
        }

        StringBuilder tripsInfo = new StringBuilder("  üìÖ C√°c chuy·∫øn xe s·∫Øp t·ªõi:\n");
        for (TripDbModel trip : trips) {
            tripsInfo.append(String.format(
                    "     - %s | Gi√°: %s VNƒê | C√≤n %d gh·∫ø\n",
                    trip.getDepartureTime().format(vietnameseFormatter),
                    formatPrice(trip.getPrice()),
                    trip.getAvailableSeats()
            ));
        }

        return tripsInfo.toString();
    }

    /**
     * T√¨m chuy·∫øn xe theo th·ªùi gian c·ª• th·ªÉ
     */
    public String findTripsByDateTime(LocalDateTime startDate, LocalDateTime endDate) {
        Specification<TripDbModel> spec = (root, query, cb) -> {
            return cb.and(
                    cb.between(root.get("departureTime"), startDate, endDate),
                    cb.equal(root.get("isDeleted"), false)
            );
        };

        List<TripDbModel> trips = tripRepository.findAll(spec,
                PageRequest.of(0, 20, Sort.by("departureTime"))).getContent();

        if (trips.isEmpty()) {
            return String.format(
                    "‚ö†Ô∏è Kh√¥ng c√≥ chuy·∫øn xe n√†o t·ª´ %s ƒë·∫øn %s",
                    startDate.format(vietnameseFormatter),
                    endDate.format(vietnameseFormatter)
            );
        }

        StringBuilder context = new StringBuilder(String.format(
                "üìÖ CHUY·∫æN XE T·ª™ %s ƒê·∫æN %s:\n\n",
                startDate.format(vietnameseFormatter),
                endDate.format(vietnameseFormatter)
        ));

        for (TripDbModel trip : trips) {
            if (trip.getRoute() != null) {
                context.append(String.format(
                        "‚Ä¢ %s ‚Üí %s | %s | %s VNƒê | C√≤n %d gh·∫ø\n",
                        trip.getRoute().getStartLocation(),
                        trip.getRoute().getEndLocation(),
                        trip.getDepartureTime().format(vietnameseFormatter),
                        formatPrice(trip.getPrice()),
                        trip.getAvailableSeats()
                ));
            }
        }

        return context.toString();
    }

    /**
     * L·∫•y th·ªëng k√™ v·ªÅ gi√° v√© cho m·ªôt tuy·∫øn c·ª• th·ªÉ
     */
    public String getPriceStatistics(String departure, String arrival) {
        String departureNormalized = normalizeLocation(departure);
        String arrivalNormalized = normalizeLocation(arrival);

        Specification<RouteDbModel> routeSpec = (root, query, cb) -> {
            return cb.and(
                    cb.like(cb.lower(root.get("startLocation")), "%" + departureNormalized.toLowerCase() + "%"),
                    cb.like(cb.lower(root.get("endLocation")), "%" + arrivalNormalized.toLowerCase() + "%"),
                    cb.equal(root.get("isDeleted"), false)
            );
        };

        List<RouteDbModel> routes = routeRepository.findAll(routeSpec);

        if (routes.isEmpty()) {
            return String.format("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y tuy·∫øn ƒë∆∞·ªùng t·ª´ %s ƒë·∫øn %s", departureNormalized, arrivalNormalized);
        }

        // L·∫•y t·∫•t c·∫£ chuy·∫øn xe c·ªßa c√°c tuy·∫øn n√†y
        List<TripDbModel> allTrips = routes.stream()
                .flatMap(route -> {
                    Specification<TripDbModel> tripSpec = (root, query, cb) -> {
                        return cb.and(
                                cb.equal(root.get("route"), route),
                                cb.greaterThanOrEqualTo(root.get("departureTime"), LocalDateTime.now()),
                                cb.equal(root.get("isDeleted"), false)
                        );
                    };
                    return tripRepository.findAll(tripSpec).stream();
                })
                .collect(Collectors.toList());

        if (allTrips.isEmpty()) {
            return "‚ö†Ô∏è Hi·ªán ch∆∞a c√≥ chuy·∫øn xe n√†o cho tuy·∫øn n√†y.";
        }

        // T√≠nh to√°n th·ªëng k√™
        var stats = allTrips.stream()
                .map(TripDbModel::getPrice)
                .mapToDouble(price -> price.doubleValue())
                .summaryStatistics();

        return String.format("""
                üí∞ TH·ªêNG K√ä GI√Å V√â T·ª™ %s ƒê·∫æN %s:
                - Gi√° th·∫•p nh·∫•t: %s VNƒê
                - Gi√° cao nh·∫•t: %s VNƒê
                - Gi√° trung b√¨nh: %s VNƒê
                - T·ªïng s·ªë chuy·∫øn: %d chuy·∫øn
                """,
                departureNormalized.toUpperCase(),
                arrivalNormalized.toUpperCase(),
                formatPrice(stats.getMin()),
                formatPrice(stats.getMax()),
                formatPrice(stats.getAverage()),
                allTrips.size()
        );
    }

    // ==================== HELPER METHODS ====================

    /**
     * Chu·∫©n h√≥a t√™n ƒë·ªãa ƒëi·ªÉm (vi·∫øt hoa ch·ªØ c√°i ƒë·∫ßu m·ªói t·ª´)
     */
    private String normalizeLocation(String location) {
        if (location == null || location.trim().isEmpty()) {
            return "";
        }

        return java.util.Arrays.stream(location.trim().split("\\s+"))
                .map(word -> word.substring(0, 1).toUpperCase() + word.substring(1).toLowerCase())
                .collect(Collectors.joining(" "));
    }

    /**
     * Format gi√° ti·ªÅn theo ki·ªÉu Vi·ªát Nam (VD: 150.000)
     */
    private String formatPrice(Number price) {
        if (price == null) {
            return "0";
        }
        return String.format("%,.0f", price.doubleValue()).replace(",", ".");
    }

    /**
     * Format th·ªùi gian t·ª´ ph√∫t sang gi·ªù:ph√∫t
     */
    private String formatDuration(Integer minutes) {
        if (minutes == null || minutes == 0) {
            return "Ch∆∞a x√°c ƒë·ªãnh";
        }

        int hours = minutes / 60;
        int mins = minutes % 60;

        if (hours > 0 && mins > 0) {
            return String.format("%d gi·ªù %d ph√∫t", hours, mins);
        } else if (hours > 0) {
            return String.format("%d gi·ªù", hours);
        } else {
            return String.format("%d ph√∫t", mins);
        }
    }
}

